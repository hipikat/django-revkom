# pylint: disable=C0103
# C0103 - Invalid name for type. Please excuses the 'constants' g and s.
"""
Reusable base settings for Django projects. Intended usage is to set
globals in a settings file specific to an instance of a server, then
include this file via execfile().

These base settings will avoid overriding settings from including
files, while setting defaults dynamically based on the value of
attributes such as DEBUG.
"""

import sys
from unipath import Path
from django.core.exceptions import ImproperlyConfigured
from revkom.settings import SETTINGS_PATH
from revkom.settings.utils import LoggingSettings, SettingsList


# Shortcuts for checking and setting default settings.
G = globals()
#S = g.setdefault


# Test mode
G['TESTING'] = True if 'test' in sys.argv else False


# Required, pre-defined settings.
G['REVKOM_REQUIRED_SETTINGS'].default(set(('PROJECT_NAME', 'ADMINS'))
if not REVKOM_REQUIRED_SETTINGS.issubset(g):
    raise ImproperlyConfigured(
        "Settings module missing expected setting(s): %s" %
        list(REVKOM_REQUIRED_SETTINGS.difference(g)))

###
# Django - Metadata
###
s('TIME_ZONE', 'UTC')
s('LANGUAGE_CODE', 'en')
s('MANAGERS', g['ADMINS'])
s('SITE_ID', 1)
s('WSGI_APPLICATION', g['PROJECT_NAME'] + '.wsgi.application')

###
# Diretory structure
###
# Project directory is the repository root.
s('PROJECT_DIR', SETTINGS_PATH.ancestor(3))
# Only fixtures, static and template directories are used internally by Django.
s('LIB_DIR', g['PROJECT_DIR'].child('lib'))              # lib/
s('VAR_DIR', g['PROJECT_DIR'].child('var'))              # var/
s('CONF_DIR', g['VAR_DIR'])                              # var/
s('DB_DIR', g['VAR_DIR'].child('db'))                    # var/db/
s('FIXTURE_DIRS', [g['VAR_DIR'].child('fixtures'),])     # var/fixtures/
s('LOG_DIR', g['VAR_DIR'].child('log'))                  # var/log/
s('STATIC_ROOT', g['VAR_DIR'].child('static'))           # var/static/
s('MEDIA_ROOT', g['VAR_DIR'].child('media'))             # var/media/
s('TMP_DIR', g['VAR_DIR'].child('tmp'))                  # var/tmp/
s('SRC_DIR', g['PROJECT_DIR'].child('src'))              # src/
s('STATICFILES_DIRS', [g['SRC_DIR'].child('static'),])   # src/static/
s('TEMPLATE_DIRS', [g['SRC_DIR'].child('templates'),])   # src/templates/
sys.path.insert(0, g['SRC_DIR'].child('apps'))           # src/apps/

###
# Security
###
# Host/domain names that are valid for this site; required if DEBUG is False
# https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts
s('REVKOM_LOCAL_HOSTS', ['localhost', '127.0.0.1'])
ALLOWED_HOSTS = SettingsList(g.get('ALLOWED_HOSTS'), REVKOM_LOCAL_HOSTS)
INTERNAL_IPS = SettingsList(g.get('INTERNAL_IPS'), INTERNAL_IPS)


# By default we look for a secret key in var/SECRET_KEY. New secret keys
# can be generated by running `scripts/make_secret_key.py'
# https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-SECRET_KEY
s('SECRET_KEY_FILE', g['CONF_DIR'].child('SECRET_KEY'))
if 'SECRET_KEY' not in g:
    if 'SECRET_KEY_FILE' in g and Path(g['SECRET_KEY_FILE']).exists():
        SECRET_KEY = g['SECRET_KEY_FILE'].read_file()
    elif g['CONF_DIR'].child('SECRET_KEY').exists():
        SECRET_KEY = g['CONF_DIR'].child('SECRET_KEY').read_file()

###
# Debugging and development modes
###
s('DEBUG', False)
s('TEMPLATE_DEBUG', g['DEBUG'])

###
# Logging
###
# http://docs.djangoproject.com/en/dev/topics/logging
s('LOGGING', LoggingSettings({
    'formatters': {
        'verbose': {
            'format': "\n%(levelname)s [%(asctime)s][%(pathname)s:%(lineno)s]" +
                      "[p/t:%(process)d/%(thread)d]\n%(message)s"
        },  
        'simple': {
            'format': '%(levelname)s [%(module)s:%(lineno)s] %(message)s'
        },  
    },   
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}, logfile_dir=g['LOG_DIR']))

###
# Databases
###
s('DATABASES', {'default': {
    'ENGINE': 'django.db.backends.sqlite3',
    'NAME': g['DB_DIR'].child('default.db'),
}})

###
# Caching
###
s('CACHE_MIDDLEWARE_ANONYMOUS_ONLY', True)
s('CACHES', {'default': {
    'BACKEND': 'django.core.cache.backends.locmem.LocMemCache'
}})

###
# URLs
###
s('ROOT_URLCONF', g['PROJECT_NAME'] + '.urls')
s('MEDIA_URL', '/media/')
s('STATIC_URL', '/static/')

###
# Django - Feature switches
###
s('USE_I18N', True)     # Internationalisation framework
s('USE_L10N', True)     # Localisation framework
s('USE_TZ', True)       # Timezone support for dates

###
# Django - File discovery
###
# List of finder classes that know how to find static files.
s('STATICFILES_FINDERS', [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
])
s('REVKOM_STATICFILES', [])
# List of callables that know how to import templates.
s('TEMPLATE_LOADERS', [
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
])

###
# Django - request pipline
###
# https://docs.djangoproject.com/en/dev/topics/http/middleware/
s('MIDDLEWARE_CLASSES', [
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
])

###
# Django - Installed apps
###
s('REVKOM_DEFAULT_INSTALLED_APPS', [
    'revkom',
    # django-debug-toolbar: A configurable set of panels that display
    # various debug information about the current request/response.
    # https://github.com/django-debug-toolbar/django-debug-toolbar
    'debug_toolbar',
    # django-extensions: shell_plus, runserver_plus, etc.
    # http://packages.python.org/django-extensions/
    'django_extensions',
    # South: Database-agnostic migrations for Django applications.
    # http://south.readthedocs.org
    'south',
    # Django contrib packages
    # https://docs.djangoproject.com/en/dev/ref/contrib/
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    #'django.contrib.flatpages',
    'django.contrib.humanize',
    'django.contrib.messages',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'django.contrib.sites',
])
# First installed app is the active project, followed by apps any inheriting
# settings files have requsted (by setting a list of apps in their
# REVKOM_INSTALL_APPS global), followed by REVKOM_DEFAULT_INSTALLED_APPS,
# which is defined above, minus anything listed in REVKOM_EXCLUDE_APPS.
INSTALLED_APPS = [g['PROJECT_NAME']] + \
    [app for app in
        list(s('REVKOM_INSTALL_APPS', [])) + g['REVKOM_DEFAULT_INSTALLED_APPS']
        if app not in s('REVKOM_EXCLUDE_APPS', [])]
